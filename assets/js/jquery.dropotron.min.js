function($) {
  /**
   * @return {?}
   */
  $.fn.disableSelection_dropotron = function() {
    return $(this).css("user-select", "none").css("-khtml-user-select", "none").css("-moz-user-select", "none").css("-o-user-select", "none").css("-webkit-user-select", "none");
  };
  /**
   * @param {?} ajaxOptions
   * @return {?}
   */
  $.fn.dropotron = function(ajaxOptions) {
    if (0 == this.length) {
      return $(this);
    }
    if (this.length > 1) {
      /** @type {number} */
      var i = 0;
      for (;i < this.length;i++) {
        $(this[i]).dropotron(ajaxOptions);
      }
    }
    return $.dropotron($.extend({
      selectorParent : $(this)
    }, ajaxOptions));
  };
  /**
   * @param {?} ajaxOptions
   * @return {undefined}
   */
  $.dropotron = function(ajaxOptions) {
    var options = $.extend({
      selectorParent : null,
      baseZIndex : 1E3,
      menuClass : "dropotron",
      expandMode : "hover",
      hoverDelay : 150,
      hideDelay : 250,
      openerClass : "opener",
      openerActiveClass : "active",
      submenuClassPrefix : "level-",
      mode : "fade",
      speed : "fast",
      easing : "swing",
      alignment : "left",
      offsetX : 0,
      offsetY : 0,
      globalOffsetY : 0,
      IEOffsetX : 0,
      IEOffsetY : 0,
      noOpenerFade : true,
      detach : true,
      cloneOnDetach : true
    }, ajaxOptions);
    var current = options.selectorParent;
    var li = current.find("ul");
    var $body = $("body");
    var collection = $("body,html");
    var $win = $(window);
    /** @type {boolean} */
    var r = false;
    /** @type {null} */
    var timeoutTimer = null;
    /** @type {null} */
    var timer = null;
    current.on("doCollapseAll", function() {
      li.trigger("doCollapse");
    });
    li.each(function() {
      var $el = $(this);
      var input = $el.parent();
      if (options.hideDelay > 0) {
        $el.add(input).on("mouseleave", function(dataAndEvents) {
          window.clearTimeout(timer);
          /** @type {number} */
          timer = window.setTimeout(function() {
            $el.trigger("doCollapse");
          }, options.hideDelay);
        });
      }
      $el.disableSelection_dropotron().hide().addClass(options.menuClass).css("position", "absolute").on("mouseenter", function(dataAndEvents) {
        window.clearTimeout(timer);
      }).on("doExpand", function() {
        if ($el.is(":visible")) {
          return false;
        }
        window.clearTimeout(timer);
        li.each(function() {
          var collection = $(this);
          if (!$.contains(collection.get(0), input.get(0))) {
            collection.trigger("doCollapse");
          }
        });
        var f;
        var target;
        var val;
        var top;
        var silentOptions = input.offset();
        var o = input.position();
        var px = (input.parent().position(), input.outerWidth());
        var width = $el.outerWidth();
        /** @type {boolean} */
        var v = $el.css("z-index") == options.baseZIndex;
        if (v) {
          switch(f = options.detach ? silentOptions : o, top = f.top + input.outerHeight() + options.globalOffsetY, target = options.alignment, $el.removeClass("left").removeClass("right").removeClass("center"), options.alignment) {
            case "right":
              val = f.left - width + px;
              if (0 > val) {
                val = f.left;
                /** @type {string} */
                target = "left";
              }
              break;
            case "center":
              /** @type {number} */
              val = f.left - Math.floor((width - px) / 2);
              if (0 > val) {
                val = f.left;
                /** @type {string} */
                target = "left";
              } else {
                if (val + width > $win.width()) {
                  val = f.left - width + px;
                  /** @type {string} */
                  target = "right";
                }
              }
              break;
            case "left":
            ;
            default:
              val = f.left;
              if (val + width > $win.width()) {
                val = f.left - width + px;
                /** @type {string} */
                target = "right";
              }
            ;
          }
          $el.addClass(target);
        } else {
          switch("relative" == input.css("position") || "absolute" == input.css("position") ? (top = options.offsetY, val = -1 * o.left) : (top = o.top + options.offsetY, val = 0), options.alignment) {
            case "right":
              val += -1 * input.parent().outerWidth() + options.offsetX;
              break;
            case "center":
            ;
            case "left":
            ;
            default:
              val += input.parent().outerWidth() + options.offsetX;
          }
        }
        if (navigator.userAgent.match(/MSIE ([0-9]+)\./)) {
          if (RegExp.$1 < 8) {
            val += options.IEOffsetX;
            top += options.IEOffsetY;
          }
        }
        $el.css("left", val + "px").css("top", top + "px").css("opacity", "0.01").show();
        /** @type {boolean} */
        var TYPEAHEAD_REGEXP = false;
        switch(val = "relative" == input.css("position") || "absolute" == input.css("position") ? -1 * o.left : 0, $el.offset().left < 0 ? (val += input.parent().outerWidth() - options.offsetX, TYPEAHEAD_REGEXP = true) : $el.offset().left + width > $win.width() && (val += -1 * input.parent().outerWidth() - options.offsetX, TYPEAHEAD_REGEXP = true), TYPEAHEAD_REGEXP && $el.css("left", val + "px"), $el.hide().css("opacity", "1"), options.mode) {
          case "zoom":
            /** @type {boolean} */
            r = true;
            input.addClass(options.openerActiveClass);
            $el.animate({
              width : "toggle",
              height : "toggle"
            }, options.speed, options.easing, function() {
              /** @type {boolean} */
              r = false;
            });
            break;
          case "slide":
            /** @type {boolean} */
            r = true;
            input.addClass(options.openerActiveClass);
            $el.animate({
              height : "toggle"
            }, options.speed, options.easing, function() {
              /** @type {boolean} */
              r = false;
            });
            break;
          case "fade":
            if (r = true, v && !options.noOpenerFade) {
              /** @type {number} */
              TYPEAHEAD_REGEXP = "slow" == options.speed ? 80 : "fast" == options.speed ? 40 : Math.floor(options.speed / 2);
              input.fadeTo(TYPEAHEAD_REGEXP, 0.01, function() {
                input.addClass(options.openerActiveClass);
                input.fadeTo(options.speed, 1);
                $el.fadeIn(options.speed, function() {
                  /** @type {boolean} */
                  r = false;
                });
              });
            } else {
              input.addClass(options.openerActiveClass);
              input.fadeTo(options.speed, 1);
              $el.fadeIn(options.speed, function() {
                /** @type {boolean} */
                r = false;
              });
            }
            break;
          case "instant":
          ;
          default:
            input.addClass(options.openerActiveClass);
            $el.show();
        }
        return false;
      }).on("doCollapse", function() {
        return $el.is(":visible") ? ($el.hide(), input.removeClass(options.openerActiveClass), $el.find("." + options.openerActiveClass).removeClass(options.openerActiveClass), $el.find("ul").hide(), false) : false;
      }).on("doToggle", function(dataAndEvents) {
        return $el.is(":visible") ? $el.trigger("doCollapse") : $el.trigger("doExpand"), false;
      });
      input.disableSelection_dropotron().addClass("opener").css("cursor", "pointer").on("click touchend", function(event) {
        if (!r) {
          event.preventDefault();
          event.stopPropagation();
          $el.trigger("doToggle");
        }
      });
      if ("hover" == options.expandMode) {
        input.hover(function(dataAndEvents) {
          if (!r) {
            /** @type {number} */
            timeoutTimer = window.setTimeout(function() {
              $el.trigger("doExpand");
            }, options.hoverDelay);
          }
        }, function(dataAndEvents) {
          window.clearTimeout(timeoutTimer);
        });
      }
    });
    li.find("a").css("display", "block").on("click touchend", function(types) {
      if (!r) {
        if ($(this).attr("href").length < 1) {
          types.preventDefault();
        }
      }
    });
    current.find("li").css("white-space", "nowrap").each(function() {
      var current = $(this);
      var $link = current.children("a");
      var list = current.children("ul");
      var link = $link.attr("href");
      $link.on("click touchend", function(event) {
        if (0 == link.length || "#" == link) {
          event.preventDefault();
        } else {
          event.stopPropagation();
        }
      });
      if ($link.length > 0) {
        if (0 == list.length) {
          current.on("click touchend", function(event) {
            if (!r) {
              current.trigger("doCollapseAll");
              event.stopPropagation();
            }
          });
        }
      }
    });
    current.children("li").each(function() {
      var o;
      var $page = $(this);
      var el = $page.children("ul");
      if (el.length > 0) {
        if (options.detach) {
          if (options.cloneOnDetach) {
            o = el.clone();
            o.attr("class", "").hide().appendTo(el.parent());
          }
          el.detach().appendTo($body);
        }
        var zIndex = options.baseZIndex;
        /** @type {number} */
        var l = 1;
        var next = el;
        for (;next.length > 0;l++) {
          next.css("z-index", zIndex++);
          if (options.submenuClassPrefix) {
            next.addClass(options.submenuClassPrefix + (zIndex - 1 - options.baseZIndex));
          }
          next = next.find("> li > ul");
        }
      }
    });
    $win.on("scroll", function() {
      current.trigger("doCollapseAll");
    }).on("keypress", function(event) {
      if (!r) {
        if (!(27 != event.keyCode)) {
          event.preventDefault();
          current.trigger("doCollapseAll");
        }
      }
    });
    collection.on("click touchend", function() {
      if (!r) {
        current.trigger("doCollapseAll");
      }
    });
  };
}(jQuery);

