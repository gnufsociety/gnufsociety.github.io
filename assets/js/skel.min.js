/* skel.js v3.0.1 */
var skel = function() {
  var self = {
    breakpointIds : null,
    events : {},
    isInit : false,
    obj : {
      attachments : {},
      breakpoints : {},
      head : null,
      states : {}
    },
    sd : "/",
    state : null,
    stateHandlers : {},
    stateId : "",
    vars : {},
    DOMReady : null,
    indexOf : null,
    isArray : null,
    iterate : null,
    matchesMedia : null,
    /**
     * @param {Array} obj
     * @param {Object} value
     * @return {undefined}
     */
    extend : function(obj, value) {
      self.iterate(value, function(key) {
        if (self.isArray(value[key])) {
          if (!self.isArray(obj[key])) {
            /** @type {Array} */
            obj[key] = [];
          }
          self.extend(obj[key], value[key]);
        } else {
          if ("object" == typeof value[key]) {
            if ("object" != typeof obj[key]) {
              obj[key] = {};
            }
            self.extend(obj[key], value[key]);
          } else {
            obj[key] = value[key];
          }
        }
      });
    },
    /**
     * @param {string} xhtml
     * @return {?}
     */
    newStyle : function(xhtml) {
      /** @type {Element} */
      var element = document.createElement("style");
      return element.type = "text/css", element.innerHTML = xhtml, element;
    },
    _canUse : null,
    /**
     * @param {string} property
     * @return {?}
     */
    canUse : function(property) {
      if (!self._canUse) {
        /** @type {Element} */
        self._canUse = document.createElement("div");
      }
      /** @type {(CSSStyleDeclaration|null)} */
      var divStyle = self._canUse.style;
      var uc_prop = property.charAt(0).toUpperCase() + property.slice(1);
      return property in divStyle || ("Moz" + uc_prop in divStyle || ("Webkit" + uc_prop in divStyle || ("O" + uc_prop in divStyle || "ms" + uc_prop in divStyle)));
    },
    /**
     * @param {string} event
     * @param {Function} fn
     * @return {?}
     */
    on : function(event, fn) {
      var b = event.split(/[\s]+/);
      return self.iterate(b, function(key) {
        var t = b[key];
        if (self.isInit) {
          if ("init" == t) {
            return void fn();
          }
          if ("change" == t) {
            fn();
          } else {
            var zeroQuoted = t.charAt(0);
            if ("+" == zeroQuoted || "!" == zeroQuoted) {
              var i = t.substring(1);
              if (i in self.obj.breakpoints) {
                if ("+" == zeroQuoted && self.obj.breakpoints[i].active) {
                  fn();
                } else {
                  if ("!" == zeroQuoted && !self.obj.breakpoints[i].active) {
                    return void fn();
                  }
                }
              }
            }
          }
        }
        if (!self.events[t]) {
          /** @type {Array} */
          self.events[t] = [];
        }
        self.events[t].push(fn);
      }), self;
    },
    /**
     * @param {string} type
     * @return {?}
     */
    trigger : function(type) {
      return self.events[type] && 0 != self.events[type].length ? (self.iterate(self.events[type], function(mode) {
        self.events[type][mode]();
      }), self) : void 0;
    },
    /**
     * @param {?} breakpoint
     * @return {?}
     */
    breakpoint : function(breakpoint) {
      return self.obj.breakpoints[breakpoint];
    },
    /**
     * @param {Object} initial
     * @return {?}
     */
    breakpoints : function(initial) {
      /**
       * @param {string} name
       * @param {?} stats
       * @return {undefined}
       */
      function cb(name, stats) {
        this.name = this.id = name;
        this.media = stats;
        /** @type {boolean} */
        this.active = false;
        /** @type {boolean} */
        this.wasActive = false;
      }
      return cb.prototype.matches = function() {
        return self.matchesMedia(this.media);
      }, cb.prototype.sync = function() {
        this.wasActive = this.active;
        this.active = this.matches();
      }, self.iterate(initial, function(i) {
        self.obj.breakpoints[i] = new cb(i, initial[i]);
      }), window.setTimeout(function() {
        self.poll();
      }, 0), self;
    },
    /**
     * @param {?} timeoutKey
     * @param {?} dataAndEvents
     * @return {undefined}
     */
    addStateHandler : function(timeoutKey, dataAndEvents) {
      self.stateHandlers[timeoutKey] = dataAndEvents;
    },
    /**
     * @param {?} timeoutKey
     * @return {undefined}
     */
    callStateHandler : function(timeoutKey) {
      var filters = self.stateHandlers[timeoutKey]();
      self.iterate(filters, function(id) {
        self.state.attachments.push(filters[id]);
      });
    },
    /**
     * @param {string} state
     * @return {undefined}
     */
    changeState : function(state) {
      self.iterate(self.obj.breakpoints, function(attributeName) {
        self.obj.breakpoints[attributeName].sync();
      });
      /** @type {string} */
      self.vars.lastStateId = self.stateId;
      /** @type {string} */
      self.stateId = state;
      self.breakpointIds = self.stateId === self.sd ? [] : self.stateId.substring(1).split(self.sd);
      if (self.obj.states[self.stateId]) {
        self.state = self.obj.states[self.stateId];
      } else {
        self.obj.states[self.stateId] = {
          attachments : []
        };
        self.state = self.obj.states[self.stateId];
        self.iterate(self.stateHandlers, self.callStateHandler);
      }
      self.detachAll(self.state.attachments);
      self.attachAll(self.state.attachments);
      self.vars.stateId = self.stateId;
      self.vars.state = self.state;
      self.trigger("change");
      self.iterate(self.obj.breakpoints, function(name) {
        if (self.obj.breakpoints[name].active) {
          if (!self.obj.breakpoints[name].wasActive) {
            self.trigger("+" + name);
          }
        } else {
          if (self.obj.breakpoints[name].wasActive) {
            self.trigger("-" + name);
          }
        }
      });
    },
    /**
     * @param {Object} param
     * @param {?} args
     * @return {?}
     */
    generateStateConfig : function(param, args) {
      var existing = {};
      return self.extend(existing, param), self.iterate(self.breakpointIds, function(timeoutKey) {
        self.extend(existing, args[self.breakpointIds[timeoutKey]]);
      }), existing;
    },
    /**
     * @return {?}
     */
    getStateId : function() {
      /** @type {string} */
      var optsData = "";
      return self.iterate(self.obj.breakpoints, function(name) {
        var set = self.obj.breakpoints[name];
        if (set.matches()) {
          optsData += self.sd + set.id;
        }
      }), optsData;
    },
    /**
     * @return {undefined}
     */
    poll : function() {
      /** @type {string} */
      var value = "";
      value = self.getStateId();
      if ("" === value) {
        /** @type {string} */
        value = self.sd;
      }
      if (value !== self.stateId) {
        self.changeState(value);
      }
    },
    _attach : null,
    /**
     * @param {Object} context
     * @return {?}
     */
    attach : function(context) {
      /** @type {null} */
      var head = self.obj.head;
      var node = context.element;
      return node.parentNode && node.parentNode.tagName ? false : (self._attach || (self._attach = head.firstChild), head.insertBefore(node, self._attach.nextSibling), context.permanent && (self._attach = node), true);
    },
    /**
     * @param {Object} filters
     * @return {undefined}
     */
    attachAll : function(filters) {
      /** @type {Array} */
      var values = [];
      self.iterate(filters, function(i) {
        if (!values[filters[i].priority]) {
          /** @type {Array} */
          values[filters[i].priority] = [];
        }
        values[filters[i].priority].push(filters[i]);
      });
      values.reverse();
      self.iterate(values, function(property) {
        self.iterate(values[property], function(i) {
          self.attach(values[property][i]);
        });
      });
    },
    /**
     * @param {Object} target
     * @return {?}
     */
    detach : function(target) {
      var node = target.element;
      return target.permanent || (!node.parentNode || node.parentNode && !node.parentNode.tagName) ? false : (node.parentNode.removeChild(node), true);
    },
    /**
     * @param {Object} tasks
     * @return {undefined}
     */
    detachAll : function(tasks) {
      var opts = {};
      self.iterate(tasks, function(k) {
        /** @type {boolean} */
        opts[tasks[k].id] = true;
      });
      self.iterate(self.obj.attachments, function(i) {
        if (!(i in opts)) {
          self.detach(self.obj.attachments[i]);
        }
      });
    },
    /**
     * @param {?} i
     * @return {?}
     */
    attachment : function(i) {
      return i in self.obj.attachments ? self.obj.attachments[i] : null;
    },
    /**
     * @param {string} i
     * @param {Element} templateElement
     * @param {(Function|number)} priority
     * @param {boolean} permanent
     * @return {?}
     */
    newAttachment : function(i, templateElement, priority, permanent) {
      return self.obj.attachments[i] = {
        id : i,
        element : templateElement,
        priority : priority,
        permanent : permanent
      };
    },
    /**
     * @return {undefined}
     */
    init : function() {
      self.initMethods();
      self.initVars();
      self.initEvents();
      self.obj.head = document.getElementsByTagName("head")[0];
      /** @type {boolean} */
      self.isInit = true;
      self.trigger("init");
    },
    /**
     * @return {undefined}
     */
    initEvents : function() {
      self.on("resize", function() {
        self.poll();
      });
      self.on("orientationChange", function() {
        self.poll();
      });
      self.DOMReady(function() {
        self.trigger("ready");
      });
      if (window.onload) {
        self.on("load", window.onload);
      }
      /**
       * @return {undefined}
       */
      window.onload = function() {
        self.trigger("load");
      };
      if (window.onresize) {
        self.on("resize", window.onresize);
      }
      /**
       * @return {undefined}
       */
      window.onresize = function() {
        self.trigger("resize");
      };
      if (window.onorientationchange) {
        self.on("orientationChange", window.onorientationchange);
      }
      /**
       * @return {undefined}
       */
      window.onorientationchange = function() {
        self.trigger("orientationChange");
      };
    },
    /**
     * @return {undefined}
     */
    initMethods : function() {
      if (document.addEventListener) {
        !function(fn, $timeout) {
          self.DOMReady = $timeout();
        }("domready", function() {
          /**
           * @param {?} i
           * @return {undefined}
           */
          function flush(i) {
            /** @type {number} */
            r = 1;
            for (;i = spec.shift();) {
              i();
            }
          }
          var fn;
          /** @type {Array} */
          var spec = [];
          /** @type {HTMLDocument} */
          var doc = document;
          /** @type {string} */
          var domContentLoaded = "DOMContentLoaded";
          /** @type {boolean} */
          var r = /^loaded|^c/.test(doc.readyState);
          return doc.addEventListener(domContentLoaded, fn = function() {
            doc.removeEventListener(domContentLoaded, fn);
            flush();
          }), function(func) {
            if (r) {
              func();
            } else {
              spec.push(func);
            }
          };
        });
      } else {
        !function(fn, $timeout) {
          self.DOMReady = $timeout();
        }("domready", function(makeIterator) {
          /**
           * @param {?} i
           * @return {undefined}
           */
          function flush(i) {
            /** @type {number} */
            h = 1;
            for (;i = arr.shift();) {
              i();
            }
          }
          var fn;
          /** @type {Array} */
          var arr = [];
          /** @type {boolean} */
          var f = false;
          /** @type {HTMLDocument} */
          var doc = document;
          /** @type {Element} */
          var testEl = doc.documentElement;
          /** @type {function (this:Element, string=): ?} */
          var hack = testEl.doScroll;
          /** @type {string} */
          var domContentLoaded = "DOMContentLoaded";
          /** @type {string} */
          var addEventListener = "addEventListener";
          /** @type {string} */
          var ON_READY_STATE_CHANGE = "onreadystatechange";
          /** @type {string} */
          var readyState = "readyState";
          /** @type {RegExp} */
          var loadedRgx = hack ? /^loaded|^c/ : /^loaded|c/;
          /** @type {boolean} */
          var h = loadedRgx.test(doc[readyState]);
          return doc[addEventListener] && doc[addEventListener](domContentLoaded, fn = function() {
            doc.removeEventListener(domContentLoaded, fn, f);
            flush();
          }, f), hack && doc.attachEvent(ON_READY_STATE_CHANGE, fn = function() {
            if (/^c/.test(doc[readyState])) {
              doc.detachEvent(ON_READY_STATE_CHANGE, fn);
              flush();
            }
          }), makeIterator = hack ? function(iterator) {
            if (self != top) {
              if (h) {
                iterator();
              } else {
                arr.push(iterator);
              }
            } else {
              (function() {
                try {
                  testEl.doScroll("left");
                } catch (n) {
                  return setTimeout(function() {
                    makeIterator(iterator);
                  }, 50);
                }
                iterator();
              })();
            }
          } : function(iterator) {
            if (h) {
              iterator();
            } else {
              arr.push(iterator);
            }
          };
        });
      }
      if (Array.prototype.indexOf) {
        /**
         * @param {string} xs
         * @param {string} ar
         * @return {?}
         */
        self.indexOf = function(xs, ar) {
          return xs.indexOf(ar);
        };
      } else {
        /**
         * @param {string} val
         * @param {number} v
         * @return {?}
         */
        self.indexOf = function(val, v) {
          if ("string" == typeof val) {
            return val.indexOf(v);
          }
          var i;
          var len;
          var n = v ? v : 0;
          if (!this) {
            throw new TypeError;
          }
          if (len = this.length, 0 === len || n >= len) {
            return-1;
          }
          if (0 > n) {
            /** @type {number} */
            n = len - Math.abs(n);
          }
          i = n;
          for (;len > i;i++) {
            if (this[i] === val) {
              return i;
            }
          }
          return-1;
        };
      }
      if (Array.isArray) {
        /**
         * @param {?} ar
         * @return {?}
         */
        self.isArray = function(ar) {
          return Array.isArray(ar);
        };
      } else {
        /**
         * @param {?} o
         * @return {?}
         */
        self.isArray = function(o) {
          return "[object Array]" === Object.prototype.toString.call(o);
        };
      }
      if (Object.keys) {
        /**
         * @param {Object} obj
         * @param {Function} iterator
         * @return {?}
         */
        self.iterate = function(obj, iterator) {
          if (!obj) {
            return[];
          }
          var i;
          /** @type {Array.<string>} */
          var array = Object.keys(obj);
          /** @type {number} */
          i = 0;
          for (;array[i] && iterator(array[i], obj[array[i]]) !== false;i++) {
          }
        };
      } else {
        /**
         * @param {Object} obj
         * @param {Function} cb
         * @return {?}
         */
        self.iterate = function(obj, cb) {
          if (!obj) {
            return[];
          }
          var prop;
          for (prop in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, prop) && cb(prop, obj[prop]) === false) {
              break;
            }
          }
        };
      }
      if (window.matchMedia) {
        /**
         * @param {string} q
         * @return {?}
         */
        self.matchesMedia = function(q) {
          return "" == q ? true : window.matchMedia(q).matches;
        };
      } else {
        if (window.styleMedia || window.media) {
          /**
           * @param {string} media
           * @return {?}
           */
          self.matchesMedia = function(media) {
            if ("" == media) {
              return true;
            }
            var styleMedia = window.styleMedia || window.media;
            return styleMedia.matchMedium(media || "all");
          };
        } else {
          if (window.getComputedStyle) {
            /**
             * @param {string} c
             * @return {?}
             */
            self.matchesMedia = function(c) {
              if ("" == c) {
                return true;
              }
              /** @type {Element} */
              var style = document.createElement("style");
              var insertAt = document.getElementsByTagName("script")[0];
              /** @type {null} */
              var innerSize = null;
              /** @type {string} */
              style.type = "text/css";
              /** @type {string} */
              style.id = "matchmediajs-test";
              insertAt.parentNode.insertBefore(style, insertAt);
              innerSize = "getComputedStyle" in window && window.getComputedStyle(style, null) || style.currentStyle;
              /** @type {string} */
              var text = "@media " + c + "{ #matchmediajs-test { width: 1px; } }";
              return style.styleSheet ? style.styleSheet.cssText = text : style.textContent = text, "1px" === innerSize.width;
            };
          } else {
            /**
             * @param {string} key
             * @return {?}
             */
            self.matchesMedia = function(key) {
              if ("" == key) {
                return true;
              }
              var i;
              var part;
              var codeSegments;
              var split;
              var suggest_values = {
                "min-width" : null,
                "max-width" : null
              };
              /** @type {boolean} */
              var o = false;
              codeSegments = key.split(/\s+and\s+/);
              /** @type {number} */
              i = 0;
              for (;i < codeSegments.length;i++) {
                part = codeSegments[i];
                if ("(" == part.charAt(0)) {
                  part = part.substring(1, part.length - 1);
                  split = part.split(/:\s+/);
                  if (2 == split.length) {
                    /** @type {number} */
                    suggest_values[split[0].replace(/^\s+|\s+$/g, "")] = parseInt(split[1]);
                    /** @type {boolean} */
                    o = true;
                  }
                }
              }
              if (!o) {
                return false;
              }
              /** @type {number} */
              var browserWidth = document.documentElement.clientWidth;
              /** @type {number} */
              var browserHeight = document.documentElement.clientHeight;
              return null !== suggest_values["min-width"] && browserWidth < suggest_values["min-width"] || (null !== suggest_values["max-width"] && browserWidth > suggest_values["max-width"] || (null !== suggest_values["min-height"] && browserHeight < suggest_values["min-height"] || null !== suggest_values["max-height"] && browserHeight > suggest_values["max-height"])) ? false : true;
            };
          }
        }
      }
      if (navigator.userAgent.match(/MSIE ([0-9]+)/)) {
        if (RegExp.$1 < 9) {
          /**
           * @param {string} dataAndEvents
           * @return {?}
           */
          self.newStyle = function(dataAndEvents) {
            /** @type {Element} */
            var ret = document.createElement("span");
            return ret.innerHTML = '&nbsp;<style type="text/css">' + dataAndEvents + "</style>", ret;
          };
        }
      }
    },
    /**
     * @return {undefined}
     */
    initVars : function() {
      var browser;
      var browserVersion;
      var suiteView;
      /** @type {string} */
      var ua = navigator.userAgent;
      /** @type {string} */
      browser = "other";
      /** @type {number} */
      browserVersion = 0;
      /** @type {Array} */
      suiteView = [["firefox", /Firefox\/([0-9\.]+)/], ["bb", /BlackBerry.+Version\/([0-9\.]+)/], ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/], ["opera", /OPR\/([0-9\.]+)/], ["opera", /Opera\/([0-9\.]+)/], ["edge", /Edge\/([0-9\.]+)/], ["safari", /Version\/([0-9\.]+).+Safari/], ["chrome", /Chrome\/([0-9\.]+)/], ["ie", /MSIE ([0-9]+)/], ["ie", /Trident\/.+rv:([0-9]+)/]];
      self.iterate(suiteView, function(dataAndEvents, errors) {
        return ua.match(errors[1]) ? (browser = errors[0], browserVersion = parseFloat(RegExp.$1), false) : void 0;
      });
      self.vars.browser = browser;
      self.vars.browserVersion = browserVersion;
      /** @type {string} */
      browser = "other";
      /** @type {number} */
      browserVersion = 0;
      /** @type {Array} */
      suiteView = [["ios", /([0-9_]+) like Mac OS X/, function(flags) {
        return flags.replace("_", ".").replace("_", "");
      }], ["ios", /CPU like Mac OS X/, function(dataAndEvents) {
        return 0;
      }], ["wp", /Windows Phone ([0-9\.]+)/, null], ["android", /Android ([0-9\.]+)/, null], ["mac", /Macintosh.+Mac OS X ([0-9_]+)/, function(flags) {
        return flags.replace("_", ".").replace("_", "");
      }], ["windows", /Windows NT ([0-9\.]+)/, null], ["bb", /BlackBerry.+Version\/([0-9\.]+)/, null], ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null]];
      self.iterate(suiteView, function(dataAndEvents, $1) {
        return ua.match($1[1]) ? (browser = $1[0], browserVersion = parseFloat($1[2] ? $1[2](RegExp.$1) : RegExp.$1), false) : void 0;
      });
      self.vars.os = browser;
      self.vars.osVersion = browserVersion;
      self.vars.IEVersion = "ie" == self.vars.browser ? self.vars.browserVersion : 99;
      /** @type {boolean} */
      self.vars.touch = "wp" == self.vars.os ? navigator.msMaxTouchPoints > 0 : !!("ontouchstart" in window);
      /** @type {boolean} */
      self.vars.mobile = "wp" == self.vars.os || ("android" == self.vars.os || ("ios" == self.vars.os || "bb" == self.vars.os));
    }
  };
  return self.init(), self;
}();
!function(dataAndEvents, factory) {
  if ("function" == typeof define && define.amd) {
    define([], factory);
  } else {
    if ("object" == typeof exports) {
      module.exports = factory();
    } else {
      dataAndEvents.skel = factory();
    }
  }
}(this, function() {
  return skel;
});
